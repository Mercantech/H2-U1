@page "/data-serialization"

<PageTitle>Data Serialisering - H2 Studieplan</PageTitle>

<div class="serialization-container">
    <div class="serialization-header">
        <h1 class="serialization-title">
            <i class="fas fa-exchange-alt"></i>
            Data Serialisering
        </h1>
        <p class="serialization-subtitle">JSON håndtering og data mapping i C#</p>
    </div>

    <!-- Grundlæggende Serialisering -->
    <div class="content-section">
        <h2><i class="fas fa-code"></i> Grundlæggende Serialisering</h2>
        <div class="explanation-card">
            <p>
                Serialisering er processen med at konvertere objekter til et format der kan gemmes eller sendes over netværket.
                I moderne web-applikationer bruger vi primært JSON (JavaScript Object Notation).
            </p>
            
            <div class="methods-grid">
                <div class="method-card get">
                    <h4>Objekt til JSON</h4>
                    <div class="code-block">
                        <pre><code class="language-csharp">
public class Person
{
    public string Navn { get; set; }
    public int Alder { get; set; }
    public string[] Hobbyer { get; set; }
}

// Serialisering
var person = new Person 
{ 
    Navn = "Peter", 
    Alder = 25,
    Hobbyer = new[] { "Programmering", "Gaming" }
};

// Konverter til JSON
string json = JsonSerializer.Serialize(person);

// Resultat: {
//     "Navn":"Peter",
//     "Alder":25,
//     "Hobbyer":["Programmering","Gaming"]
// }
                        </code></pre>
                    </div>
                    <div class="explanation-text">
                        <p>System.Text.Json er den anbefalede måde at serialisere i moderne C#:</p>
                        <ul>
                            <li>Hurtigere end Newtonsoft.Json</li>
                            <li>Indbygget i .NET</li>
                            <li>Understøtter alle grundlæggende datatyper</li>
                            <li>Kan håndtere komplekse objekter og arrays</li>
                        </ul>
                    </div>
                </div>

                <div class="method-card post">
                    <h4>JSON til Objekt</h4>
                    <div class="code-block">
                        <pre><code class="language-csharp">// JSON string
string json = "&#123;
    Navn: Peter,
    Alder: 25,
    Hobbyer: [Programmering, Gaming]
&#125;";

// Deserialisering
var person = JsonSerializer.Deserialize&lt;Person&gt;(json);

// Brug objektet
Console.WriteLine(person.Navn); // Output: Peter
                        </code></pre>
                    </div>
                    <div class="explanation-text">
                        <p>Deserialisering konverterer JSON tilbage til et C# objekt:</p>
                        <ul>
                            <li>Automatisk type-konvertering</li>
                            <li>Fejlhåndtering hvis JSON er ugyldig</li>
                            <li>Understøtter nestede objekter</li>
                            <li>Kan håndtere null-værdier</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Avanceret: Data Mapping -->
    <div class="content-section">
        <h2><i class="fas fa-random"></i> Data Mapping & Attributter</h2>
        <div class="explanation-card">
            <p>
                Nogle gange matcher JSON-felter ikke dine C#-property navne. Her kan du bruge attributter til at mappe felter korrekt.
            </p>
            <div class="code-block">
                <h4>Eksempel med [JsonPropertyName]</h4>
                <pre><code class="language-csharp">public class Bruger
{
    [JsonPropertyName("user_name")]
    public string Brugernavn { get; set; }

    [JsonPropertyName("age")]
    public int Alder { get; set; }
}

// JSON: { "user_name": "maria", "age": 30 }
</code></pre>
            </div>
            <div class="explanation-text">
                <p>
                    <code>[JsonPropertyName]</code> gør det muligt at matche JSON-felter med dine egne property-navne i C#.
                </p>
            </div>
        </div>
    </div>

    <!-- Håndtering af Lister og Arrays -->
    <div class="content-section">
        <h2><i class="fas fa-list"></i> Lister og Arrays</h2>
        <div class="explanation-card">
            <p>
                Du kan nemt serialisere og deserialisere lister og arrays:
            </p>
            <div class="code-block">
                <h4>Eksempel</h4>
                <pre><code class="language-csharp">// Liste af personer
var personer = new List&lt;Person&gt; {
    new Person { Navn = "Peter", Alder = 25, Hobbyer = new[] { "Gaming" } },
    new Person { Navn = "Maria", Alder = 30, Hobbyer = new[] { "Løb" } }
};

string json = JsonSerializer.Serialize(personer);

var personer2 = JsonSerializer.Deserialize&lt;List&lt;Person&gt;&gt;(json);
</code></pre>
            </div>
        </div>
    </div>

    <!-- Fejlhåndtering ved Serialisering -->
    <div class="content-section">
        <h2><i class="fas fa-exclamation-triangle"></i> Fejlhåndtering</h2>
        <div class="explanation-card">
            <p>
                Det er vigtigt at håndtere fejl, hvis JSON ikke matcher dine klasser eller er ugyldig.
            </p>
            <div class="code-block">
                <h4>Try-Catch ved Deserialisering</h4>
                <pre><code class="language-csharp">try
{
    var person = JsonSerializer.Deserialize&lt;Person&gt;(ugyldigJson);
}
catch (JsonException ex)
{
    Console.WriteLine("Fejl i JSON: " + ex.Message);
}
</code></pre>
            </div>
        </div>
    </div>

    <!-- Best Practices -->
    <div class="content-section">
        <h2><i class="fas fa-check-circle"></i> Best Practices</h2>
        <div class="explanation-card">
            <ul>
                <li>Brug <code>System.Text.Json</code> til nye projekter</li>
                <li>Brug attributter til at matche JSON og C# properties</li>
                <li>Håndter fejl med try/catch</li>
                <li>Valider data efter deserialisering</li>
                <li>Undgå at stole blindt på eksternt data</li>
            </ul>
        </div>
    </div>
</div>
