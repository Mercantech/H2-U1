@inject APIService ApiService

<div class="backend-status-container">
    <div class="status-header">
        <h3><i class="fas fa-server"></i> Backend Server Status</h3>
        <button class="btn-refresh" @onclick="RefreshStatus" disabled="@isLoading">
            <i class="fas @(isLoading ? "fa-spinner fa-spin" : "fa-sync-alt")"></i>
            @(isLoading ? "Opdaterer..." : "Opdater")
        </button>
    </div>

    @if (isLoading && backendStatus == null)
    {
        <div class="loading-state">
            <i class="fas fa-spinner fa-spin"></i>
            <span>Tjekker backend status...</span>
        </div>
    }
    else if (backendStatus != null)
    {
        <div class="status-grid">
            <div class="status-card @(GetStatusClass("server"))">
                <div class="status-icon">
                    <i class="fas fa-server"></i>
                </div>
                <div class="status-info">
                    <h4>Opgaver API</h4>
                    <p class="status-text">@backendStatus.Server?.Status</p>
                    <p class="api-url">opgaver.mercantec.tech</p>
                </div>
                <div class="status-indicator">
                    <i class="fas @(GetStatusIcon("server"))"></i>
                </div>
            </div>

            <div class="status-card @(GetStatusClass("mongodb"))">
                <div class="status-icon database-logo">
                    <img src="assets/mongodb.png" alt="MongoDB" class="database-image" />
                </div>
                <div class="status-info">
                    <h4>MongoDB</h4>
                    <p class="status-text">@backendStatus.MongoDB?.Status</p>
                    @if (!string.IsNullOrEmpty(backendStatus.MongoDB?.Database))
                    {
                        <p class="database-name">Database: @backendStatus.MongoDB.Database</p>
                    }
                </div>
                <div class="status-indicator">
                    <i class="fas @(GetStatusIcon("mongodb"))"></i>
                </div>
            </div>

            <div class="status-card @(GetStatusClass("postgresql"))">
                <div class="status-icon database-logo">
                    <img src="assets/postgres.png" alt="PostgreSQL" class="database-image" />
                </div>
                <div class="status-info">
                    <h4>PostgreSQL</h4>
                    <p class="status-text">@backendStatus.PostgreSQL?.Status</p>
                    @if (!string.IsNullOrEmpty(backendStatus.PostgreSQL?.Database))
                    {
                        <p class="database-name">Database: @backendStatus.PostgreSQL.Database</p>
                    }
                </div>
                <div class="status-indicator">
                    <i class="fas @(GetStatusIcon("postgresql"))"></i>
                </div>
            </div>
        </div>

        <div class="timestamp">
            <i class="fas fa-clock"></i>
            Sidst opdateret: @backendStatus.Timestamp.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")
        </div>
    }
    else
    {
        <div class="error-state">
            <i class="fas fa-exclamation-triangle"></i>
            <h4>Kunne ikke forbinde til backend</h4>
            <p>Der opstod en fejl ved forsøg på at tjekke backend status. Prøv igen senere.</p>
        </div>
    }
</div>

<style>
    .backend-status-container {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        margin: 2rem 0;
        border-left: 5px solid #28a745;
    }

    .status-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f8f9fa;
    }

    .status-header h3 {
        color: #333;
        margin: 0;
        font-size: 1.5rem;
    }

    .status-header h3 i {
        color: #28a745;
        margin-right: 0.5rem;
    }

    .btn-refresh {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 25px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-refresh:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
    }

    .btn-refresh:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .loading-state, .error-state {
        text-align: center;
        padding: 3rem 2rem;
        color: #666;
    }

    .loading-state i, .error-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #667eea;
    }

    .error-state i {
        color: #dc3545;
    }

    .error-state h4 {
        color: #dc3545;
        margin-bottom: 0.5rem;
    }

    .status-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .status-card {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: all 0.3s ease;
        border-left: 4px solid #6c757d;
    }

    .status-card.running {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border-left-color: #28a745;
    }

    .status-card.error {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border-left-color: #dc3545;
    }

    .status-icon {
        font-size: 2rem;
        color: #6c757d;
        min-width: 50px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .status-card.running .status-icon {
        color: #28a745;
    }

    .status-card.error .status-icon {
        color: #dc3545;
    }

    .database-logo {
        padding: 0.5rem;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .database-image {
        width: 40px;
        height: 40px;
        object-fit: contain;
        transition: all 0.3s ease;
    }

    .status-card.running .database-image {
        filter: brightness(1.1) saturate(1.2);
    }

    .status-card.error .database-image {
        filter: grayscale(0.7) brightness(0.8);
    }

    .status-info {
        flex: 1;
    }

    .status-info h4 {
        margin: 0 0 0.5rem 0;
        color: #333;
        font-size: 1.2rem;
    }

    .status-text {
        margin: 0;
        font-weight: 600;
        color: #666;
    }

    .database-name, .api-url {
        margin: 0.25rem 0 0 0;
        font-size: 0.9rem;
        color: #888;
    }

    .api-url {
        font-family: 'Courier New', monospace;
        background: rgba(0, 0, 0, 0.05);
        padding: 0.2rem 0.4rem;
        border-radius: 4px;
        display: inline-block;
    }

    .status-indicator {
        font-size: 1.5rem;
    }

    .status-indicator .fa-check-circle {
        color: #28a745;
    }

    .status-indicator .fa-times-circle {
        color: #dc3545;
    }

    .status-indicator .fa-question-circle {
        color: #ffc107;
    }

    .timestamp {
        text-align: center;
        color: #888;
        font-size: 0.9rem;
        padding-top: 1rem;
        border-top: 1px solid #e9ecef;
    }

    .timestamp i {
        margin-right: 0.5rem;
    }

    @@media (max-width: 768px) {
        .backend-status-container {
            padding: 1rem;
            margin: 1rem 0;
        }

        .status-header {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
        }

        .status-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .status-card {
            padding: 1rem;
        }

        .database-image {
            width: 35px;
            height: 35px;
        }
    }
</style>

@code {
    private BlazorWASM.Services.BackendStatus? backendStatus;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await RefreshStatus();
    }

    private async Task RefreshStatus()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            backendStatus = await ApiService.GetBackendStatusAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved opdatering af status: {ex.Message}");
            backendStatus = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetStatusClass(string service)
    {
        return service.ToLower() switch
        {
            "server" => IsServiceRunning(backendStatus?.Server?.Status) ? "running" : "error",
            "mongodb" => IsServiceRunning(backendStatus?.MongoDB?.Status) && !backendStatus.MongoDB.IsError ? "running" : "error",
            "postgresql" => IsServiceRunning(backendStatus?.PostgreSQL?.Status) && !backendStatus.PostgreSQL.IsError ? "running" : "error",
            _ => ""
        };
    }

    private string GetStatusIcon(string service)
    {
        return service.ToLower() switch
        {
            "server" => IsServiceRunning(backendStatus?.Server?.Status) ? "fa-check-circle" : "fa-times-circle",
            "mongodb" => IsServiceRunning(backendStatus?.MongoDB?.Status) && !backendStatus.MongoDB.IsError ? "fa-check-circle" : "fa-times-circle",
            "postgresql" => IsServiceRunning(backendStatus?.PostgreSQL?.Status) && !backendStatus.PostgreSQL.IsError ? "fa-check-circle" : "fa-times-circle",
            _ => "fa-question-circle"
        };
    }

    private bool IsServiceRunning(string? status)
    {
        return !string.IsNullOrEmpty(status) && status.Contains("running", StringComparison.OrdinalIgnoreCase);
    }
} 